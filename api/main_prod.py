import requests
import json
import base64, os
import jwt
import hashlib
import math
import sys
import time
from base64 import b64decode

if __name__=='__main__':

    url = 'https://api.firma.digital.gob.cl/firma/v2/files/tickets'
    exp='2020-06-20T14:59:00'
    otp='759228'

    layout='<AgileSignerConfig><Application id=\"THIS-CONFIG\"><pdfPassword/><Signature><Visible active=\"true\" layer2=\"true\" label=\"true\" pos=\"1\"><llx>50</llx><lly>100</lly><urx>350</urx><ury>200</ury><page>LAST</page><image>BASE64</image><BASE64VALUE></BASE64VALUE></Visible></Signature></Application></AgileSignerConfig>'


    tokenDesatendido = jwt.encode({'entity': 'Instituto Nacional de Estadísticas',
                        'run':'10685080',
                        'expiration': exp,
                        'purpose':'Desatendido'},
                        'a08253d568bf46f2a5ef8217dbb06da7', algorithm='HS256').decode('utf-8')

    tokenAtendido = jwt.encode({'entity': 'Instituto Nacional de Estadísticas',
                        'run':'14202112',
                        'expiration': exp,
                        'purpose':'Propósito General'},
                        'a08253d568bf46f2a5ef8217dbb06da7', algorithm='HS256').decode('utf-8')



    with open('doc.pdf', 'rb') as pdf_file: # Convierte a Base64 el documento pdf hasta 20 megas
        pdfb64 = base64.b64encode(pdf_file.read()).decode('utf-8')


    with open('doc.pdf', "rb") as f: # Genera el checksum desde el documento pdf hasta 20 megas
        bytesConv = f.read()
        readable_hash = hashlib.sha256(bytesConv).hexdigest()
        checksum= readable_hash

    archivo = open('layout.txt', 'r')
    archivo=archivo.read()

    files ={'api_token_key':'99c3f6e0-24c9-4c58-a564-dfde158cb987',
            'token':tokenDesatendido, 'files': [{'content-type': 'application/pdf',
             'content': pdfb64, 'description':'Str', 'layout':layout,
             'checksum': checksum}]}




    headers = {'content-type': 'application/json'} # 'OTP':otp     (agregar cuando es atendido)


    response = requests.post(url, data=json.dumps(files), headers=headers)


    if response.status_code==200:

        print(response.status_code)

        response_str=response.text #Estrae la respuesta como str
        response_dic = json.loads(response_str) # la convierte en una estructura json

        files_dic= response_dic['files'][0] #Estrae files
        pdfb64Signed = files_dic['content'] #estraes el content (base64 del archivo firmado)

        pdfSigned = base64.b64decode(str(pdfb64Signed)) # convierte a pdf

        with open(os.path.expanduser('DocumentoFirmadoProd.pdf'), 'wb') as fout: #guarda el pdf en carpeta
            fout.write(pdfSigned)
            fout.close()


    else:
        # print(archivo)
        print(response.status_code)
        print(response.content)
